/*头文件*/
#include<stdlib.h>
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<windows.h>  //控制DOS界面 
/*宏定义*/
#define  MAXIMUS 15  //定义棋盘大小 
/*函数声明*/
int p[MAXIMUS][MAXIMUS];//存储对局信息 
char buff[MAXIMUS*2+1][MAXIMUS*4+3];//输出缓冲器 
int  Cx,Cy;//当前光标位置 
int Now;//当前走姿的玩家，1代表黑，2代表白 
int  wl,wp;//当前写入缓冲器的列数和行数位置
char* showText;//在棋盘中央显示的文字信息
int count;//回合数
void explation();//游戏说明
void gotoxy(int x,int y);//光标位置
int color(int c);//文字颜色
/*设置光标位置*/
void gotoxy(int x,int y)
{
	COORD c;
	c.X=x;
	c.Y=y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),c);
} 
/*文字颜色函数，此函数的局限性：1.只能Windows系统下使用；2.不能改变背景颜色*/
int color(int c)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),c);//更改文字颜色
	return 0; 
}
/*开始界面*/
void welcometogame()
{
	int n;
	int i,j=1;
	gotoxy(23,2);
	color(13);
	printf("五 子 棋 游 戏");
	color(15);//白色边框 
	for(i=6;i<=12;i++)//输出上下边框 
	{
		for(j=7;j<=54;j++)//输出左右边框
		{
			gotoxy(j,i);
			if(i==6||i==12)
			{
				printf("-");
			}
			else if(j==7||j==54)
			{
				printf("|");
			}
		 } 
	}
  color(14);
  gotoxy(15,8);
  printf("1.开始游戏");
  gotoxy(35,8);
  printf("2.游戏说明");
  gotoxy(15,10);
  printf("3.退出游戏");
  gotoxy(19,13);
  color(12);
  printf("请选择[1 2 3]:[ ]\b\b");//\b为退格，使光标处于[]中间
  color(14);
  scanf("%d",&n);//输入选择
  switch(n)
  {
  	case 1:
  		system("cls");
  		RunGame();
  		break;
  	case 2:
  		explation();
  		break;
  	case 3:
  		exit(0);//退出游戏
		break; 
  }
}
/*游戏说明*/
void explation()
{
	int i,j=1;
	system("cls");
	color(13);
	gotoxy(27,3);
	printf("游戏说明");
	color(5);
	for(i=6;i<=22;i++)//输出上下边框
	{
		for(j=3;j<=58;j++)//输出左右边框
		{
			gotoxy(j,i);
			if(i==6||i==22) printf("=");
			else if(j==3||j==58) printf("||");
		} 
	}
	color(15);
	gotoxy(10,8);
	printf("tip1:用↑.↓.←.→控制光标的位置");
	color(14);
	gotoxy(10,11);
	printf("tip2:用空格键确定下棋子");
	color(12);
	gotoxy(10,14);
	printf("tips:黑白棋哪个先上下左右5个连在一起，取得胜利");
	color(11);
	gotoxy(10,17);
	printf("tip4:按<Esc>退出游戏");
	getch();//按任意键返回主界面
	system("cls");
	welcometogame(); 
} 
void Display()
{
	int i,l=strlen(showText);//循环变量，中间文字信息的长度
	int Offset=MAXIMUS*2+2-1/2;//算出中间文字信息居中显示所在的横坐标位置
	if(Offset%2==1)//如果位置为奇数，则移动到偶数，避免混乱
	{
		Offset--;
	}
	Copy(buff[MAXIMUS]+Offset,showText);//将中间文字信息复制到缓冲器
	if(1%2==1)//如果中间文字长度为半角函数，则补上空格，避免混乱
	{
		*(buff[MAXIMUS]+Offset+1)=0x20;
	}
	system("cls");//清理屏幕，准备写入 
	for(i=0;i<MAXIMUS*2+1;i++)//循环写入每一行
	{
		printf("%s",buff[i]);
		if(i<MAXIMUS*2)//写入完每一行需要换行
		printf("\n"); 
	}	 
}
int RunGame()
{
   int input;//输入变量
   int victor;//赢家信息
   Initialize();//初始化对局
   while(1)//开始无限回合的死循环，知道胜利并跳出
   {
   	Print();//打印棋盘
	input=getch();//等待键盘按下一个字符
	if(input==27)//如果按<Esc>键则退出程序
	{
		exit(0);
    }
	else if(input==0x20)//如果是空格则开始走棋子
	 {
		if(Put())//如果走子成功则判断胜负
		{
			victor=Check();
			Now=3-Now;//轮换当前走子玩家
			count++;
			if(victor==1)//如果黑方胜利，显示提示文字并等待一次按键，返回胜利信息 
			{
				showText="黑方获得了胜利！";
				Print();
				if(getch()==0xE0)
				{
					getch();
				}
				return Now; 
			} 
			else if(victor==2)//如果白方胜利，显示提示文字并等待一次按键，返回胜利信息
			{
				showText="白方获得了胜利！";
				Display();
				if(getch()==0xE0)
				{
					getch();
				}
				return Now;
			}
			else if(count==MAXIMUS*MAXIMUS)//如果回合数达到了期盼总量，棋盘充满，即为平局
			{
				showText="平局!";
				Dispaly();
				if(getch()==0xE0)
				{
					getch();
				}
			} 
			return 0;
		} 
	 }	   
 //如果按下的是方向键，会填充两次输入，第一次为0xE0表示按下的是控制键
  else if(input==0xE0)
   {
  	input=getch();//获得第二次输入信息
	switch(input)//判断方向键方向并移动光标位置
	{
		case 0x4B:Cx--;break;
		case 0x48:Cy--;break;
		case 0x4D:Cx++;break;
		case 0x5D:Cy++;break;
    }
	if(Cx<0)Cx=MAXIMUS-1;//如果光标位置越界则移动到对侧
	if(Cy<0)Cy=MAXIMUS-1;
	if(Cx>MAXIMUS-1)Cx=0;
	if(Cy>MAXIMUS-1)Cy=0;
   }
  }
}
int main()//主函数
{
	welcometogame();
	while(1)//循环执行游戏
	{
		RunGame();
	}
	return 0; 
} 